#line 1 "E:/Software and Electronic wilcom/PROGRAMS/AIR FLOW METER/flow main/FLOW METER.c"
#line 1 "e:/software and electronic wilcom/programs/air flow meter/flow main/hard_specific.c"



char GLCD_DataPort at PORTD;
sbit GLCD_CS2 at RB3_bit;
sbit GLCD_CS1 at RB2_bit;
sbit GLCD_RS at RB7_bit;
sbit GLCD_RW at RB6_bit;
sbit GLCD_EN at RB5_bit;
sbit GLCD_RST at RB4_bit;

sbit GLCD_CS2_Direction at TRISB3_bit;
sbit GLCD_CS1_Direction at TRISB2_bit;
sbit GLCD_RS_Direction at TRISB7_bit;
sbit GLCD_RW_Direction at TRISB6_bit;
sbit GLCD_EN_Direction at TRISB5_bit;
sbit GLCD_RST_Direction at TRISB4_bit;


sbit BACK_LIGHT at RA4_bit;
sbit BACK_LIGHT_Direction at TRISA4_bit;

void Init_mcu()
{
 BACK_LIGHT_Direction=0;
 BACK_LIGHT=1;
 ADCON1 = 0x1E;
 I2C1_Init(100000);

}
#line 6 "E:/Software and Electronic wilcom/PROGRAMS/AIR FLOW METER/flow main/FLOW METER.c"
unsigned int digital_value,lo_RAGE,hi_RAGE;
char txt[15],total_txt[15];
char PSX;
float volts=0,old_volts=1,actual_flow,TOTALLIZER=0.0;
double volts_1;
char Total_flag=0;
unsigned short ii;
char *someText;
char temp_str[4],OPEN=1;
char one_sec;
char timer_back_light=0;
char Setting_Mode_Enter=0;







void delay2S()
{
 delay_ms(2000);
}


char set_but(char active)
 {
 if (Button(&PORTE, 0, 1, active)==255)
 {
 timer_back_light=0;
 if (BACK_LIGHT==0)
 {
 BACK_LIGHT=1;
 return 0;
 }
 return 255;
 }
 else
 return 0;
 }

char shift_but(char active)
{
 if (Button(&PORTE, 2, 1, active)==255)
 {
 while(Button(&PORTE, 2, 1, active)==255);
 timer_back_light=0;
 if (BACK_LIGHT==0)
 {
 BACK_LIGHT=1;
 return 0;
 }
 return 255;
 }
 else
 return 0;
}

char scrl_but(char active)
{
 if (Button(&PORTE, 1, 1, active)==255)
 {
 timer_back_light=0;
 if (BACK_LIGHT==0)
 {
 BACK_LIGHT=1;
 return 0;
 }
 return 255;
 }
 else
 return 0;
}



void boder()
{
 Glcd_H_Line(0, 127, 0, 1);
 Glcd_H_Line(0, 127, 1, 1);
 Glcd_H_Line(0, 127, 62, 1);
 Glcd_H_Line(0, 127, 63, 1);
#line 92 "E:/Software and Electronic wilcom/PROGRAMS/AIR FLOW METER/flow main/FLOW METER.c"
}

void cls()
{
 Glcd_Fill(0x00);
 boder();
 OPEN=1;
}
void fill()
{
 Glcd_Fill(0xff);
}
void set_3x5()
{
 Glcd_Set_Font(Font_Glcd_System3x5 , 3, 5, 32);
}
void set_5x7()
{
 Glcd_Set_Font(Font_Glcd_5x7, 5, 7, 32);
}

void set_8x7()
{
 Glcd_Set_Font(Font_Glcd_Character8x7, 8, 7, 32);
}



void init_timer0()
{

 T0CON.TMR0ON = 0;
 T0CON.T08BIT = 0;
 T0CON.T0CS = 0;
 T0CON.T0SE = 0;
 T0CON.PSA = 0;
 T0CON.T0PS2 = 1;
 T0CON.T0PS1 = 1;
 T0CON.T0PS0 = 0;
 TMR0H = 0xB;
 TMR0L = 0xDC;
 INTCON.TMR0IE=1;
 INTCON.TMR0IF=0;
}
void TIMER0_ON()
{
 T0CON.TMR0ON = 1;
}
void TIMER0_Off()
{
 T0CON.TMR0ON = 0;
}
#line 1 "e:/software and electronic wilcom/programs/air flow meter/flow main/built_in.h"
#line 1 "e:/software and electronic wilcom/programs/air flow meter/flow main/xglcd_lib.c"





const unsigned short xColorClear = 0;
const unsigned short xColorSet = 1;
const unsigned short xColorInvert= 2;


const char* xGlcdSelFont;

unsigned short xGlcdX, xGlcdY, xGlcdSelFontHeight,
 xGlcdSelFontWidth, xGlcdSelFontOffset,
 xGlcdSelFontNbRows;

char xGLCD_Transparency;

void xGlcd_Set_Font(const char* ptrFontTbl, unsigned short font_width,
 unsigned short font_height, unsigned int font_offset)
{
 xGlcdSelFont = ptrFontTbl;
 xGlcdSelFontWidth = font_width;
 xGlcdSelFontHeight = font_height;
 xGlcdSelFontOffset = font_offset;
 xGLCD_Transparency =  0 ;
 xGlcdSelFontNbRows = xGlcdSelFontHeight / 8;
 if (xGlcdSelFontHeight % 8) xGlcdSelFontNbRows++;
}


void xGLCD_Write_Data(unsigned short pX, unsigned short pY, unsigned short pData)
{
 unsigned short tmp, tmpY, gData, dataR, xx, yy;

 if ((pX>127) || (pY>63)) return;
 xx = pX % 64;
 tmp = pY / 8;
 if (tmp>7) return;
 tmpY = pY % 8;
 if (tmpY) {

 gData = pData << tmpY;
 Glcd_Set_Side(pX);
 Glcd_Set_X(xx);
 Glcd_Set_Page(tmp);
 dataR = Glcd_Read_Data();
 dataR = Glcd_Read_Data();
 if (!xGLCD_Transparency)
 dataR = dataR & (0xff >> (8-tmpY));
 dataR = gData | dataR;
 Glcd_Set_X(xx);
 Glcd_Write_Data(dataR);

 tmp++;
 if (tmp>7) return;
 Glcd_Set_X(xx);
 Glcd_Set_Page(tmp);
 gData = pData >> (8-tmpY);
 dataR = Glcd_Read_Data();
 dataR = Glcd_Read_Data();
 if (!xGLCD_Transparency)
 dataR = dataR & (0xff << tmpY);
 dataR = gData | dataR;
 Glcd_Set_X(xx);
 Glcd_Write_Data(dataR);
 }
 else {
 Glcd_Set_Side(pX);
 Glcd_Set_X(xx);
 Glcd_Set_Page(tmp);
 if (xGLCD_Transparency){
 dataR = Glcd_Read_Data();
 dataR = Glcd_Read_Data();
 dataR = pData | dataR;
 }
 else
 dataR = pData;
 Glcd_Set_X(xx);
 Glcd_Write_Data(dataR);
 }
}

unsigned short xGlcd_Write_Char(unsigned short ch, unsigned short x, unsigned short y, unsigned short color)
{
 const char* CurCharData;
 unsigned short i, j, CharWidth, CharData;
 unsigned long cOffset;

 cOffset = xGlcdSelFontWidth * xGlcdSelFontNbRows+1;
 cOffset = cOffset * (ch-xGlcdSelFontOffset);
 CurCharData = xGlcdSelFont+cOffset;
 CharWidth = *CurCharData;
 cOffset++;
 for (i = 0; i< CharWidth; i++)
 for (j = 0; j<xGlcdSelFontNbRows; j++)
 {
 CurCharData = xGlcdSelFont+(i*xGlcdSelFontNbRows)+j+cOffset;
 switch (color){
 case 0 : CharData = 0; break;
 case 1 : CharData = *CurCharData; break;
 case 2 : CharData = ~(*CurCharData); break;
 }
 xGLCD_Write_Data(x+i,y+j*8,CharData);
 };
 return CharWidth;
}

unsigned short xGlcd_Char_Width(unsigned short ch)
{
 const char* CurCharDt;
 unsigned long cOffset;
 cOffset = xGlcdSelFontWidth * xGlcdSelFontNbRows+1;
 cOffset = cOffset * (ch-xGlcdSelFontOffset);
 CurCharDt = xGlcdSelFont+cOffset;
 return *CurCharDt;
}

void xGlcd_Write_Text(char* text, unsigned short x, unsigned short y, unsigned short color)
{
 unsigned short i, l, posX;
 char* curChar;
 l = strlen(text);
 posX = x;
 curChar = text;
 for (i=0; i<l; i++)
 {
 posX = posX + xGlcd_Write_Char(*curChar, posX,y, color) + 1;
 curChar++;
 }
}

unsigned short xGlcd_Text_Width(char* text)
{
 unsigned short i, l, w;
 l = strlen(text);
 w = 0;
 for (i = 0; i<l; i++)
 w = w + xGlcd_Char_Width(text[i])+1;
 return w;
}

void xGLCD_Set_Transparency(char active)
{
 xGLCD_Transparency = active;
}
#line 1 "e:/software and electronic wilcom/programs/air flow meter/flow main/propfont.h"
const unsigned short Tahoma14x15[] ={
 0x03, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0x00, 0x00, 0x00, 0x30, 0x00, 0x0E, 0x80, 0x01, 0x60, 0x00, 0x1C, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0xF8, 0x03, 0xFC, 0x07, 0x06, 0x0C, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x06, 0x0C, 0xFC, 0x07, 0xF8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x04, 0x08, 0xFE, 0x0F, 0xFE, 0x0F, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x0C, 0x08, 0x0E, 0x0C, 0x02, 0x0E, 0x02, 0x0B, 0x02, 0x09, 0x82, 0x09, 0xC6, 0x08, 0x7C, 0x08, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x0C, 0x06, 0x0E, 0x0E, 0x02, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0xE6, 0x0C, 0xBC, 0x07, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x80, 0x01, 0x40, 0x01, 0x20, 0x01, 0x10, 0x01, 0x08, 0x01, 0x04, 0x01, 0xFE, 0x0F, 0xFE, 0x0F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x06, 0x3E, 0x0E, 0x3E, 0x08, 0x22, 0x08, 0x22, 0x08, 0x22, 0x08, 0x62, 0x0C, 0xC2, 0x07, 0x82, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0xF0, 0x03, 0xF8, 0x07, 0x2C, 0x0C, 0x26, 0x08, 0x22, 0x08, 0x22, 0x08, 0x62, 0x0C, 0xC2, 0x07, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x02, 0x00, 0x02, 0x00, 0x02, 0x0C, 0x02, 0x0F, 0xC2, 0x03, 0xF2, 0x00, 0x3E, 0x00, 0x0E, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x18, 0x03, 0xBC, 0x07, 0xE6, 0x0C, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0xE6, 0x0C, 0xBC, 0x07, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x38, 0x00, 0x7C, 0x08, 0xC6, 0x08, 0x82, 0x08, 0x82, 0x08, 0x82, 0x0C, 0x86, 0x06, 0xFC, 0x03, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0x70, 0x0E, 0x70, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x04, 0x00, 0x60, 0x70, 0x7E, 0x70, 0x1E, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x00, 0x00, 0x80, 0x00, 0x40, 0x01, 0x40, 0x01, 0x20, 0x02, 0x20, 0x02, 0x10, 0x04, 0x10, 0x04, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x00, 0x00, 0x10, 0x01, 0x10, 0x01, 0x10, 0x01, 0x10, 0x01, 0x10, 0x01, 0x10, 0x01, 0x10, 0x01, 0x10, 0x01, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x10, 0x04, 0x20, 0x02, 0x20, 0x02, 0x40, 0x01, 0x40, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x0C, 0x00, 0x0E, 0x00, 0x02, 0x00, 0x82, 0x0D, 0xC2, 0x0D, 0x66, 0x00, 0x3C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0D, 0xE0, 0x03, 0x18, 0x0C, 0x04, 0x10, 0xC4, 0x11, 0xE2, 0x23, 0x32, 0x26, 0x12, 0x24, 0x12, 0x24, 0xF2, 0x23, 0xF4, 0x07, 0x04, 0x04, 0x18, 0x04, 0xE0, 0x03, 0x00, 0x00,
 0x09, 0x00, 0x0E, 0xC0, 0x0F, 0xF8, 0x01, 0x3E, 0x01, 0x06, 0x01, 0x3E, 0x01, 0xF8, 0x01, 0xC0, 0x0F, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0xFE, 0x0F, 0xFE, 0x0F, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x66, 0x08, 0xFC, 0x0C, 0x98, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0xF0, 0x01, 0xFC, 0x07, 0x0C, 0x06, 0x06, 0x0C, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x0E, 0x0E, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0xFE, 0x0F, 0xFE, 0x0F, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x06, 0x0C, 0x0C, 0x06, 0xFC, 0x07, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xFE, 0x0F, 0xFE, 0x0F, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xFE, 0x0F, 0xFE, 0x0F, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0xF0, 0x01, 0xFC, 0x07, 0x0C, 0x06, 0x06, 0x0C, 0x02, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0xCE, 0x0F, 0xCC, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0xFE, 0x0F, 0xFE, 0x0F, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0xFE, 0x0F, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x02, 0x08, 0x02, 0x08, 0xFE, 0x0F, 0xFE, 0x0F, 0x02, 0x08, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0x00, 0x08, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x02, 0x0C, 0xFE, 0x07, 0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0xFE, 0x0F, 0xFE, 0x0F, 0x40, 0x00, 0xE0, 0x00, 0xB0, 0x01, 0x18, 0x03, 0x0C, 0x06, 0x06, 0x0C, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xFE, 0x0F, 0xFE, 0x0F, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0C, 0xFE, 0x0F, 0x0E, 0x00, 0x3C, 0x00, 0x70, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x80, 0x01, 0x40, 0x00, 0x30, 0x00, 0x0C, 0x00, 0xFE, 0x0F, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0xFE, 0x0F, 0x0E, 0x00, 0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xE0, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x00, 0x07, 0x00, 0x0E, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0xF0, 0x01, 0xFC, 0x07, 0x0C, 0x06, 0x06, 0x0C, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x06, 0x0C, 0x0C, 0x06, 0xFC, 0x07, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0xFE, 0x0F, 0xFE, 0x0F, 0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0xC6, 0x00, 0x7C, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0xF0, 0x01, 0xFC, 0x07, 0x0C, 0x06, 0x06, 0x0C, 0x02, 0x08, 0x02, 0x18, 0x02, 0x38, 0x06, 0x6C, 0x0C, 0x46, 0xFC, 0x47, 0xF0, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0xFE, 0x0F, 0xFE, 0x0F, 0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0xC2, 0x01, 0x7E, 0x03, 0x3C, 0x06, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x38, 0x06, 0x7C, 0x0E, 0x66, 0x08, 0x62, 0x08, 0x62, 0x08, 0xC2, 0x08, 0xC2, 0x0C, 0xCE, 0x07, 0x8C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0xFE, 0x0F, 0xFE, 0x0F, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0xFE, 0x03, 0xFE, 0x07, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0C, 0xFE, 0x07, 0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x0E, 0x00, 0x7E, 0x00, 0xF0, 0x03, 0x80, 0x0F, 0x00, 0x0C, 0x80, 0x0F, 0xF0, 0x03, 0x7E, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0E, 0x1E, 0x00, 0xFE, 0x01, 0xE0, 0x0F, 0x00, 0x0E, 0x80, 0x0F, 0xF0, 0x01, 0x7E, 0x00, 0x7E, 0x00, 0xF0, 0x01, 0x80, 0x0F, 0x00, 0x0E, 0xE0, 0x0F, 0xFE, 0x01, 0x1E, 0x00,
 0x09, 0x06, 0x0C, 0x0E, 0x0E, 0x18, 0x03, 0xF0, 0x01, 0xE0, 0x00, 0xF0, 0x01, 0x18, 0x03, 0x0E, 0x0E, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x06, 0x00, 0x1E, 0x00, 0x38, 0x00, 0xE0, 0x00, 0xC0, 0x0F, 0xC0, 0x0F, 0xE0, 0x00, 0x38, 0x00, 0x1E, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x02, 0x0C, 0x02, 0x0E, 0x82, 0x0B, 0xC2, 0x09, 0x72, 0x08, 0x3A, 0x08, 0x0E, 0x08, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x00, 0x00, 0xFF, 0x7F, 0xFF, 0x7F, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0x00, 0x00, 0x03, 0x00, 0x1C, 0x00, 0x60, 0x00, 0x80, 0x01, 0x00, 0x0E, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x00, 0x00, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0xFF, 0x7F, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0x20, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x07, 0xA0, 0x0F, 0x90, 0x08, 0x90, 0x08, 0x90, 0x08, 0x90, 0x08, 0xF0, 0x0F, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xFF, 0x0F, 0xFF, 0x0F, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x30, 0x0C, 0xE0, 0x07, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0xC0, 0x03, 0xE0, 0x07, 0x30, 0x0C, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xC0, 0x03, 0xE0, 0x07, 0x30, 0x0C, 0x10, 0x08, 0x10, 0x08, 0x10, 0x04, 0xFF, 0x0F, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xC0, 0x03, 0xE0, 0x07, 0xB0, 0x0C, 0x90, 0x08, 0x90, 0x08, 0x90, 0x08, 0xF0, 0x08, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x10, 0x00, 0xFE, 0x0F, 0xFF, 0x0F, 0x11, 0x00, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xC0, 0x03, 0xE0, 0x27, 0x30, 0x4C, 0x10, 0x48, 0x10, 0x48, 0x10, 0x64, 0xF0, 0x3F, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xFF, 0x0F, 0xFF, 0x0F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x0F, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0xF6, 0x0F, 0xF6, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x04, 0x10, 0x40, 0x10, 0x40, 0xF6, 0x7F, 0xF6, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xFF, 0x0F, 0xFF, 0x0F, 0x80, 0x00, 0xC0, 0x01, 0x60, 0x03, 0x30, 0x06, 0x10, 0x0C, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0xFF, 0x0F, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0C, 0xF0, 0x0F, 0xF0, 0x0F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x0F, 0xE0, 0x0F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x0F, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xF0, 0x0F, 0xF0, 0x0F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x0F, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xC0, 0x03, 0xE0, 0x07, 0x30, 0x0C, 0x10, 0x08, 0x10, 0x08, 0x30, 0x0C, 0xE0, 0x07, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xF0, 0x7F, 0xF0, 0x7F, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x30, 0x0C, 0xE0, 0x07, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xC0, 0x03, 0xE0, 0x07, 0x30, 0x0C, 0x10, 0x08, 0x10, 0x08, 0x10, 0x04, 0xF0, 0x7F, 0xF0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0xF0, 0x0F, 0xF0, 0x0F, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0xE0, 0x04, 0xF0, 0x09, 0x90, 0x09, 0x90, 0x09, 0x90, 0x09, 0x90, 0x0F, 0x20, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0x10, 0x00, 0xFC, 0x07, 0xFC, 0x0F, 0x10, 0x08, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xF0, 0x07, 0xF0, 0x0F, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0xF0, 0x0F, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x70, 0x00, 0xF0, 0x01, 0x80, 0x07, 0x00, 0x0E, 0x00, 0x0E, 0x80, 0x07, 0xF0, 0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0C, 0x30, 0x00, 0xF0, 0x01, 0xC0, 0x0F, 0x00, 0x0E, 0xC0, 0x07, 0xF0, 0x00, 0xF0, 0x00, 0xC0, 0x07, 0x00, 0x0E, 0xC0, 0x0F, 0xF0, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x30, 0x0C, 0x70, 0x0E, 0xC0, 0x03, 0x80, 0x01, 0x80, 0x01, 0xC0, 0x03, 0x70, 0x0E, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x70, 0x00, 0xF0, 0x01, 0x80, 0x47, 0x00, 0x7E, 0x00, 0x3E, 0x80, 0x07, 0xF0, 0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 };
#line 90 "e:/software and electronic wilcom/programs/air flow meter/flow main/propfont.h"
const unsigned short Tahoma15x24[] = {
 0x08, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xFC, 0x00, 0x80, 0x1F, 0x00, 0xF0, 0x03, 0x00, 0x7E, 0x00, 0xC0, 0x0F, 0x00, 0xFC, 0x01, 0x00, 0x3E, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0E, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xE0, 0xFF, 0x07, 0xF8, 0xFF, 0x1F, 0x78, 0x00, 0x1E, 0x1C, 0x00, 0x38, 0x0C, 0x00, 0x30, 0x0C, 0x00, 0x30, 0x0C, 0x00, 0x30, 0x1C, 0x00, 0x38, 0x78, 0x00, 0x1E, 0xF8, 0xFF, 0x1F, 0xE0, 0xFF, 0x07, 0x80, 0xFF, 0x01, 0x00, 0x00, 0x00,
 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x30, 0x60, 0x00, 0x30, 0x60, 0x00, 0x30, 0x70, 0x00, 0x30, 0xF8, 0xFF, 0x3F, 0xFC, 0xFF, 0x3F, 0xFC, 0xFF, 0x3F, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x18, 0x00, 0x3C, 0x1C, 0x00, 0x3E, 0x0C, 0x00, 0x37, 0x0C, 0xC0, 0x33, 0x0C, 0xE0, 0x31, 0x0C, 0xF0, 0x30, 0x1C, 0x7C, 0x30, 0xF8, 0x3F, 0x30, 0xF0, 0x0F, 0x30, 0xE0, 0x03, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x38, 0x00, 0x18, 0x18, 0x00, 0x38, 0x1C, 0x00, 0x30, 0x0C, 0x0C, 0x30, 0x0C, 0x0C, 0x30, 0x0C, 0x0C, 0x30, 0x0C, 0x0E, 0x38, 0x1C, 0x1E, 0x1C, 0xF8, 0xF3, 0x1F, 0xF8, 0xF3, 0x0F, 0xF0, 0xC1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0E, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x63, 0x00, 0x80, 0x61, 0x00, 0xE0, 0x60, 0x00, 0x70, 0x60, 0x00, 0x18, 0x60, 0x00, 0xFC, 0xFF, 0x3F, 0xFC, 0xFF, 0x3F, 0xFC, 0xFF, 0x3F, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xFC, 0x07, 0x18, 0xFC, 0x07, 0x38, 0xFC, 0x07, 0x30, 0x0C, 0x06, 0x30, 0x0C, 0x06, 0x30, 0x0C, 0x06, 0x30, 0x0C, 0x0E, 0x38, 0x0C, 0x1E, 0x1C, 0x0C, 0xFC, 0x1F, 0x0C, 0xF8, 0x0F, 0x0C, 0xF0, 0x03, 0x00, 0x00, 0x00,
 0x0E, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x01, 0xC0, 0xFF, 0x07, 0xE0, 0xFF, 0x1F, 0xF0, 0x0C, 0x1E, 0x38, 0x04, 0x38, 0x18, 0x06, 0x30, 0x0C, 0x06, 0x30, 0x0C, 0x06, 0x30, 0x0C, 0x0E, 0x38, 0x0C, 0x1E, 0x1C, 0x1C, 0xFC, 0x1F, 0x00, 0xF8, 0x0F, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00,
 0x0D, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x20, 0x0C, 0x00, 0x38, 0x0C, 0x00, 0x3E, 0x0C, 0xC0, 0x1F, 0x0C, 0xF0, 0x07, 0x0C, 0xFC, 0x01, 0x0C, 0x3F, 0x00, 0xCC, 0x0F, 0x00, 0xFC, 0x03, 0x00, 0xFC, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0E, 0x00, 0x00, 0x00, 0xE0, 0xC1, 0x07, 0xF0, 0xF3, 0x0F, 0xF8, 0xF7, 0x1F, 0x18, 0x3F, 0x1C, 0x0C, 0x0E, 0x38, 0x0C, 0x0C, 0x30, 0x0C, 0x1C, 0x30, 0x0C, 0x18, 0x30, 0x0C, 0x3C, 0x38, 0x1C, 0x7E, 0x1C, 0xF8, 0xF7, 0x1F, 0xF0, 0xE3, 0x0F, 0xE0, 0xC1, 0x07, 0x00, 0x00, 0x00,
 0x0E, 0x00, 0x00, 0x00, 0xC0, 0x0F, 0x00, 0xF0, 0x1F, 0x00, 0xF8, 0x3F, 0x38, 0x38, 0x78, 0x30, 0x1C, 0x70, 0x30, 0x0C, 0x60, 0x30, 0x0C, 0x60, 0x30, 0x0C, 0x60, 0x18, 0x1C, 0x20, 0x1C, 0x78, 0x30, 0x0F, 0xF8, 0xFF, 0x07, 0xE0, 0xFF, 0x03, 0x80, 0x7F, 0x00, 0x00, 0x00, 0x00,
 };
#line 117 "e:/software and electronic wilcom/programs/air flow meter/flow main/propfont.h"
const unsigned short Arial10x11[] = {
 0x07, 0xC0, 0x01, 0xF8, 0x01, 0x7E, 0x00, 0x46, 0x00, 0x7E, 0x00, 0xF8, 0x01, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0xFE, 0x01, 0xFE, 0x01, 0x12, 0x01, 0x12, 0x01, 0xFE, 0x01, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0x78, 0x00, 0xFC, 0x00, 0x86, 0x01, 0x02, 0x01, 0x02, 0x01, 0x86, 0x01, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0xFE, 0x01, 0xFE, 0x01, 0x02, 0x01, 0x02, 0x01, 0xFE, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0xFE, 0x01, 0xFE, 0x01, 0x12, 0x01, 0x12, 0x01, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0xFE, 0x01, 0xFE, 0x01, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0x78, 0x00, 0xFC, 0x00, 0x86, 0x01, 0x02, 0x01, 0x22, 0x01, 0xE6, 0x01, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0xFE, 0x01, 0xFE, 0x01, 0x10, 0x00, 0x10, 0x00, 0xFE, 0x01, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x02, 0xFE, 0x01, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0x80, 0x00, 0x80, 0x01, 0x00, 0x01, 0xFE, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0xFE, 0x01, 0xFE, 0x01, 0x30, 0x00, 0x7C, 0x00, 0xEE, 0x01, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0xFE, 0x01, 0xFE, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0xFE, 0x01, 0xFE, 0x01, 0x1E, 0x00, 0xF8, 0x00, 0xC0, 0x01, 0xF8, 0x00, 0x1E, 0x00, 0xFE, 0x01, 0xFE, 0x01, 0x00, 0x00,
 0x06, 0xFE, 0x01, 0xFE, 0x01, 0x18, 0x00, 0x60, 0x00, 0xFE, 0x01, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0x78, 0x00, 0xFC, 0x00, 0x86, 0x01, 0x02, 0x01, 0x86, 0x01, 0xFC, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0xFE, 0x01, 0xFE, 0x01, 0x22, 0x00, 0x22, 0x00, 0x3E, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0x78, 0x00, 0xFC, 0x00, 0x86, 0x01, 0x42, 0x01, 0x86, 0x01, 0xFC, 0x01, 0x78, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0xFE, 0x01, 0xFE, 0x01, 0x22, 0x00, 0x62, 0x00, 0xFE, 0x00, 0x9C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x9C, 0x00, 0x9E, 0x01, 0x32, 0x01, 0x32, 0x01, 0xE6, 0x01, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x02, 0x00, 0x02, 0x00, 0xFE, 0x01, 0xFE, 0x01, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0xFE, 0x00, 0xFE, 0x01, 0x00, 0x01, 0x00, 0x01, 0xFE, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0x06, 0x00, 0x7E, 0x00, 0xF8, 0x01, 0x80, 0x01, 0xF8, 0x01, 0x7E, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x7E, 0x00, 0xF8, 0x01, 0xC0, 0x01, 0x7C, 0x00, 0x0E, 0x00, 0x7C, 0x00, 0xC0, 0x01, 0xF8, 0x01, 0x7E, 0x00, 0x06, 0x00,
 0x06, 0x86, 0x01, 0xCE, 0x01, 0x78, 0x00, 0x78, 0x00, 0xCE, 0x01, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x06, 0x00, 0x1E, 0x00, 0xF0, 0x01, 0xF0, 0x01, 0x1E, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x82, 0x01, 0xC2, 0x01, 0x72, 0x01, 0x3A, 0x01, 0x0E, 0x01, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 };
#line 1 "e:/software and electronic wilcom/programs/air flow meter/flow main/slides.c"
char position=1,tposition=1,position_c=1;
int fc1,fc2,fc3,fc4,FC5;
char NUMBER_UNIT=1, sqrt_UNIT=1;
float KVALUE_k=1;
int KVALUE;

void save_tag()
{
 set_3x5();
 someText ="SAVE";
 Glcd_Write_Text(someText, 5, 2, xColorSet);

 Glcd_Box(3, 16, 21, 23, 2);
 delay_ms(500);
 set_5x7();
}

void selection(char POs)
{
 if (shift_BUT(0)==255)
 {
 while(shift_BUT(0)==255);
 position++;
 if (position==POs)
 {
 position=1;
 }
 }
}

void set_up()
{
 cls();
 Glcd_Box(0, 0, 127, 8, 0);
 xGlcd_Set_Font(Arial10x11, 10, 11, 65);

 someText ="SETUP";

 XGlcd_Write_Text(someText, 42, 0, xColorSET);

 xGlcd_Set_Font(Tahoma15x24, 15,24,45);
 Glcd_Box(0, 0, 127, 9, 2);

}
void menu1()
{
 set_up();
 Glcd_Write_Text("1.RANGE", 12, 2, xColorSet);
 Glcd_Write_Text("2.UNIT", 12, 3, xColorSet);
 Glcd_Write_Text("3.SQRT", 12, 4, xColorSet);
 Glcd_Write_Text("4.K.FACTOR", 12, 5, xColorSet);
 Glcd_Write_Text("5.RESET_TOTALIZER", 12, 6, xColorSet);
}


void counter_cursor_pos(){
 if (scrl_but(0)==255 && tposition==0)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(70, 101, 40, 0);
 Glcd_H_Line(70, 70+5, 40, 1);





 position_c=0;
 tposition=1;
 }
 else if (scrl_but(0)==255 && tposition==1)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(70, 101, 40, 0);
 Glcd_H_Line(78, 78+5, 40, 1);





 position_c=1;
 tposition=2;
 }
 else if (scrl_but(0)==255 && tposition==2)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(70, 101, 40, 0);
 Glcd_H_Line(86, 86+5, 40, 1);





 position_c=2;
 tposition=3;
 }
 else if (scrl_but(0)==255 && tposition==3)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(70, 101, 40, 0);
 Glcd_H_Line(94, 94+5, 40, 1);





 position_c=3;
 tposition=0;
 }
}

void counter_cursor_pos_low(){
 if (scrl_but(0)==255 && tposition==0)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(70, 107, 56, 0);
 Glcd_H_Line(70, 70+5, 56, 1);
 position_c=0;
 tposition=1;
 }
 else if (scrl_but(0)==255 && tposition==1)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(70, 107, 56, 0);
 Glcd_H_Line(78, 78+5, 56, 1);
 position_c=1;
 tposition=2;
 }
 else if (scrl_but(0)==255 && tposition==2)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(70, 107, 56, 0);
 Glcd_H_Line(86, 86+5, 56, 1);
 position_c=2;
 tposition=3;
 }
 else if (scrl_but(0)==255 && tposition==3)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(70, 107, 56, 0);
 Glcd_H_Line(94, 94+5, 56, 1);
 position_c=3;
 tposition=4;
 }
 else if (scrl_but(0)==255 && tposition==4)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(70, 107, 56, 0);
 Glcd_H_Line(102, 102+5, 56, 1);
 position_c=4;
 tposition=0;
 }
}
#line 192 "e:/software and electronic wilcom/programs/air flow meter/flow main/slides.c"
void counter_cursor_pos_REST(){
 if (scrl_but(0)==255 && tposition==0)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(65, 100, 40, 0);
 Glcd_H_Line(70, 70+5, 40, 1);
 position_c=0;
 tposition=1;
 }
 else if (scrl_but(0)==255 && tposition==1)
 {
 while(scrl_but(0)==255);
 Glcd_H_Line(65, 100, 40, 0);
 Glcd_H_Line(86, 86+5, 40, 1);
 position_c=2;
 tposition=0;
 }
}




void unit_set()
{
 set_up();
 Glcd_Box(28,14 , 102, 24, 1);
 Glcd_Write_Text("UNIT SETTING", 30, 2, xColorinvert);

 Glcd_Rectangle(8, 29, 35, 41, 1);
 NUMBER_UNIT = EEPROM_Read(15);
 delay_ms(100);
 if (NUMBER_UNIT==1) Glcd_Write_Text("kg/h", 10, 4, xColorSet);
 if (NUMBER_UNIT==2) Glcd_Write_Text("m3/h", 10, 4, xColorSet);
 if (NUMBER_UNIT==3) Glcd_Write_Text("TPH", 10, 4, xColorSet);


 while(set_but(0)==0)
 {
 if (shift_but(0)==255)
 {
 while(shift_but(0)==255);
 NUMBER_UNIT++;
 if (NUMBER_UNIT>=4)
 {
 NUMBER_UNIT=1;
 }
 if (NUMBER_UNIT==1)
 {
 Glcd_Write_Text("TPH ", 10, 4, xColorclear);
 Glcd_Write_Text("kg/h", 10, 4, xColorSet);
 }
 else if (NUMBER_UNIT==2)
 {
 Glcd_Write_Text("kg/h", 10, 4, xColorclear);
 Glcd_Write_Text("m3/h", 10, 4, xColorSet);
 }
 else if (NUMBER_UNIT==3)
 {
 Glcd_Write_Text("m3/h", 10, 4, xColorclear);
 Glcd_Write_Text("TPH ", 10, 4, xColorSet);
 }
 }
 }
 EEPROM_Write(15,NUMBER_UNIT);
 delay_ms(10);
 save_tag();
 while(set_but(0)==255);
 menu1();
}



void sqrt_set()
{
 set_up();
 Glcd_Box(28,14 , 102, 24, 1);
 Glcd_Write_Text("SQRT SETTING", 30, 2, xColorinvert);

 Glcd_Rectangle(8, 29, 30, 41, 1);
 sqrt_UNIT = EEPROM_Read(14);
 delay_ms(100);
 if (sqrt_UNIT==1) Glcd_Write_Text("NO ", 10, 4, xColorSet);
 if (sqrt_UNIT==2) Glcd_Write_Text("YES", 10, 4, xColorSet);
 while(set_but(0)==0)
 {
 if (shift_but(0)==255)
 {
 while(shift_but(0)==255);
 sqrt_UNIT++;
 if (sqrt_UNIT>=3)
 {
 sqrt_UNIT=1;
 }
 if (sqrt_UNIT==1)
 {
 Glcd_Write_Text("YES", 10, 4, xColorclear);
 Glcd_Write_Text("NO ", 10, 4, xColorSet);
 }
 else if (sqrt_UNIT==2)
 {
 Glcd_Write_Text("NO ", 10, 4, xColorclear);
 Glcd_Write_Text("YES", 10, 4, xColorSet);
 }
 }
 }
 EEPROM_Write(14,sqrt_UNIT);
 save_tag();
 while(set_but(0)==255);
 menu1();
}




void current_digit_change(char lcd_pos, char page_nu)
{
 if (shift_but(0)==255)
 {

 txt[position_c]++;
 if (txt[position_c]>9)
 {
 txt[position_c]=0;
 }
 if (lcd_pos==70 && page_nu==6)
 {
 if (txt[position_c]>6)
 {
 txt[position_c]=0;
#line 327 "e:/software and electronic wilcom/programs/air flow meter/flow main/slides.c"
 }
 if (txt[position_c]==6)
 {

 if (txt[1]>4)
 {
 txt[1]=4;
 }

 }
 }
 if (txt[0]==6 && lcd_pos==78 && page_nu==6)
 {
 if (txt[position_c]>4) txt[position_c]=0;
 }
 ii=txt[position_c] + '0';
 Glcd_Write_char(ii, lcd_pos, page_nu, 1);
 }
}


void compress_data()
{
 FC1=(txt[0]*10000);
 FC2=(txt[1]*1000);
 FC3=(txt[2]*100);
 FC4=(txt[3]*10);
 FC5=(txt[4]*1);
}


void counter_cursor_pos_2(){
 if (scrl_but(0)==255 && tposition==0)
 {
 while(scrl_but(0)==255);


 Glcd_H_Line(70, 100, 40, 0);
 Glcd_H_Line(70, 70+4, 40, 1);
 position_c=0;
 tposition=1;
 }

 else if (scrl_but(0)==255 && tposition==1)
 {
 while(scrl_but(0)==255);


 Glcd_H_Line(70, 100, 40, 0);
 Glcd_H_Line(86, 86+4, 40, 1);
 position_c=2;
 tposition=2;
 }

 if (scrl_but(0)==255 && tposition==2)
 {
 while(scrl_but(0)==255);


 Glcd_H_Line(70, 100, 40, 0);
 Glcd_H_Line(94, 94+5, 40, 1);
 position_c=3;
 tposition=0;
 }
}




void K_settong()
{
 set_up();
 Glcd_Box(23,14 , 122, 24, 1);
 Glcd_Write_Text("K.FACTOR SETTING", 25, 2, xColorinvert);
 Glcd_Write_Text("K.FACTOR", 5, 4, xColorSet);
 Glcd_Write_Text("min 0.01 and max 1.99", 1, 6, xColorSet);

 KVALUE=EEPROM_Read(16);

 txt[0]=(KVALUE/100)%10;
 txt[2]=(KVALUE/10)%10;
 txt[3]=(KVALUE/1)%10;

 Glcd_Write_char(txt[0]+'0', 70, 4, xColorSet);
 Glcd_Write_char('.', 78, 4, xColorSet);
 Glcd_Write_char(txt[2]+'0', 86, 4, xColorSet);
 Glcd_Write_char(txt[3]+'0', 94, 4, xColorSet);

 Glcd_Rectangle(68, 30, 101, 42, 1);

 tposition=1,position_c=0;

 Glcd_H_Line(70, 70+4, 40, 1);


 while(1)
 {
 if (position_c==0) current_digit_change(70,4);
 else if (position_c==2) current_digit_change(86,4);
 else if (position_c==3) current_digit_change(94,4);




 counter_cursor_pos_2();

 if (set_but(0)==255)
 {
 KVALUE=(txt[0]*100);
 KVALUE+=(txt[2]*10);
 KVALUE+=(txt[3]*1);


 KVALUE_k=KVALUE/100.0;



 EEPROM_Write(16,KVALUE);
 delay_ms(100);
 if (KVALUE>199 || KVALUE==0)
 {

 }
 else break;
 }
 }
 save_tag();
 while(set_but(0)==255);
 menu1();
}





void range_set()
{
 set_up();
 Glcd_Box(28,14 , 108, 24, 1);
 Glcd_Write_Text("RANGE SETTING", 30, 2, xColorinvert);
 Glcd_Write_Text("LOW RANGE", 5, 4, xColorSet);
 Glcd_Write_Text("HI RANGE", 5, 6, xColorSet);



  ((char *)&lo_RAGE)[0] =EEPROM_Read(10);
 delay_ms(10);
  ((char *)&lo_RAGE)[1] =EEPROM_Read(11);
 delay_ms(10);
  ((char *)&hi_RAGE)[0] =EEPROM_Read(12);
 delay_ms(10);
  ((char *)&hi_RAGE)[1] =EEPROM_Read(13);
 delay_ms(10);

 txt[0]=(hi_RAGE/10000)%10;
 txt[1]=(hi_RAGE/1000)%10;
 txt[2]=(hi_RAGE/100)%10;
 txt[3]=(hi_RAGE/10)%10;
 txt[4]=(hi_RAGE/1)%10;

 Glcd_Write_char(txt[0]+'0', 70, 6, xColorSet);
 Glcd_Write_char(txt[1]+'0', 78, 6, xColorSet);
 Glcd_Write_char(txt[2]+'0', 86, 6, xColorSet);
 Glcd_Write_char(txt[3]+'0', 94, 6, xColorSet);
 Glcd_Write_char(txt[4]+'0', 102, 6, xColorSet);

 Glcd_Rectangle(67, 45, 110, 58, 1);


 txt[0]=(Lo_RAGE/1000)%10;
 txt[1]=(Lo_RAGE/100)%10;
 txt[2]=(Lo_RAGE/10)%10;
 txt[3]=(Lo_RAGE/1)%10;
 Glcd_Write_char(txt[0]+'0', 70, 4, xColorSet);
 Glcd_Write_char(txt[1]+'0', 78, 4, xColorSet);
 Glcd_Write_char(txt[2]+'0', 86, 4, xColorSet);
 Glcd_Write_char(txt[3]+'0', 94, 4, xColorSet);
 Glcd_Rectangle(67, 29, 102, 42, 1);

 tposition=1,position_c=0;

 Glcd_H_Line(70, 70+5, 40, 1);


 while(1)
 {
 if (position_c==0) current_digit_change(70,4);
 else if (position_c==1) current_digit_change(78,4);
 else if (position_c==2) current_digit_change(86,4);
 else if (position_c==3) current_digit_change(94,4);
#line 526 "e:/software and electronic wilcom/programs/air flow meter/flow main/slides.c"
 counter_cursor_pos();

 if (set_but(0)==255)
 {
 while(set_but(0)==255);

 FC1=(txt[0]*1000);
 FC2=(txt[1]*100);
 FC3=(txt[2]*10);
 FC4=(txt[3]*1);


 lo_RAGE=fc1+fc2+fc3+fc4;
 EEPROM_Write(10,  ((char *)&lo_RAGE)[0] );
 delay_ms(100);
 EEPROM_Write(11,  ((char *)&lo_RAGE)[1] );
 delay_ms(100);
 break;
 }
 }

 Glcd_H_Line(70, 101, 40, 0);
 tposition=1,position_c=0;
 Glcd_H_Line(70, 70+5, 56, 1);

 txt[0]=(hi_RAGE/10000)%10;
 txt[1]=(hi_RAGE/1000)%10;
 txt[2]=(hi_RAGE/100)%10;
 txt[3]=(hi_RAGE/10)%10;
 txt[4]=(hi_RAGE/1)%10;

 Glcd_Write_char(txt[0]+'0', 70, 6, xColorSet);
 Glcd_Write_char(txt[1]+'0', 78, 6, xColorSet);
 Glcd_Write_char(txt[2]+'0', 86, 6, xColorSet);
 Glcd_Write_char(txt[3]+'0', 94, 6, xColorSet);
 Glcd_Write_char(txt[4]+'0', 102, 6, xColorSet);
 while(1)
 {
 if (position_c==0) current_digit_change(70,6);
 else if (position_c==1) current_digit_change(78,6);
 else if (position_c==2) current_digit_change(86,6);
 else if (position_c==3) current_digit_change(94,6);
 else if (position_c==4) current_digit_change(102,6);
#line 578 "e:/software and electronic wilcom/programs/air flow meter/flow main/slides.c"
 counter_cursor_pos_low();
 if (set_but(0)==255)
 {
 compress_data();
 hi_RAGE=fc1+fc2+fc3+fc4+fc5;
 EEPROM_Write(12,  ((char *)&hi_RAGE)[0] );
 delay_ms(100);
 EEPROM_Write(13,  ((char *)&hi_RAGE)[1] );
 delay_ms(100);
 break;
 }
 }
 save_tag();
 while(set_but(0)==255);
 menu1();
}


void Reset()
{
 char Reset_postion=2;
 set_up();
 Glcd_Box(28,14 , 102, 24, 1);
 Glcd_Write_Text("ARE YOU SURE", 30, 2, xColorinvert);

 Glcd_Write_Text("YES", 20, 5, xColorSet);
 Glcd_Write_Text("NO", 86, 5, xColorSet);

 Glcd_Rectangle(84, 38, 98, 48, 1);



 while(set_but(0)==0)
 {
 if (SCRL_but(0)==255)
 {
 while(SCRL_but(0)==255);
 Reset_postion++;
 if (Reset_postion>=3)
 {
 Reset_postion=1;
 }
 if (Reset_postion==1)
 {
 Glcd_Rectangle(18, 38, 38, 48, 1);
 Glcd_Rectangle(84, 38, 98, 48, 0);
 }
 else if (Reset_postion==2)
 {
 Glcd_Rectangle(84, 38, 98, 48, 1);
 Glcd_Rectangle(18, 38, 38, 48, 0);
 }
 }
 }
 if (Reset_postion==1)
 {
 TOTALLIZER=0.0;
 }
#line 660 "e:/software and electronic wilcom/programs/air flow meter/flow main/slides.c"
 save_tag();
 while(set_but(0)==255);
 menu1();
}

void clear_errow(char errow)
{

 Glcd_Write_Text("  ", 3, errow, 1);


}
#line 753 "e:/software and electronic wilcom/programs/air flow meter/flow main/slides.c"
char Pass_word()
{
 char T_pass=0;
 cls();
 SET_5X7();
 Glcd_Box(18, 6, 104, 16, 1);
 Glcd_Write_Text("ENTER PASSWORD", 20, 1, xColorINVERT);

 SET_8X7();
 Glcd_Write_Text("OMNI", 10, 5, xColorSET);
 Glcd_Write_Text("TELEMETRY", 1, 6, xColorINVERT);
 SET_5X7();
 Glcd_Write_Text("FLOW", 10, 3, xColorINVERT);
 Glcd_Write_Text("METERING", 5, 4, xColorINVERT);
 SET_5X7();
 txt[0]=0;
 txt[1]=0;
 txt[2]=0;
 txt[3]=0;
 Glcd_Write_char('0', 70, 4, xColorSet);
 Glcd_Write_char('0', 78, 4, xColorSet);
 Glcd_Write_char('0', 86, 4, xColorSet);
 Glcd_Write_char('0', 94, 4, xColorSet);
 Glcd_Rectangle(67, 29, 102, 42, 1);
 tposition=1,position_c=0;
 Glcd_H_Line(70, 70+5, 40, 1);

 while(set_but(0)==255);
 while(scrl_but(0)==255);
 while(1)
 {
 if (position_c==0) current_digit_change(70,4);
 else if (position_c==1) current_digit_change(78,4);
 else if (position_c==2) current_digit_change(86,4);
 else if (position_c==3) current_digit_change(94,4);
#line 795 "e:/software and electronic wilcom/programs/air flow meter/flow main/slides.c"
 counter_cursor_pos();

 if (set_but(0)==255)
 {
 if (txt[0]==7 && txt[1]==4 && txt[2]==7 && txt[3]==8)
 {
 return 255;
 }
 else if (txt[0]==0 && txt[1]==0 && txt[2]==0 && txt[3]==0)
 {

 return 0;
 }
 else
 {
 txt[0]=0;
 txt[1]=0;
 txt[2]=0;
 txt[3]=0;
 Glcd_Write_char('0', 70, 4, xColorSet);
 Glcd_Write_char('0', 78, 4, xColorSet);
 Glcd_Write_char('0', 86, 4, xColorSet);
 Glcd_Write_char('0', 94, 4, xColorSet);
 Glcd_Rectangle(67, 29, 102, 42, 1);
 Glcd_H_Line(70, 101, 40, 0);
 tposition=1,position_c=0;
 Glcd_H_Line(70, 70+5, 40, 1);
 while(set_but(0)==255);
 }
 }
 }
 Glcd_H_Line(70, 101, 40, 0);
}



void slide_1 ()
{
 menu1();
 set_3x5();
 Glcd_Write_Text("=>", 3, 2, xColorSet);
 set_5x7();

 while(scrl_but(0)==0)
 {
 selection(6);
 if (position==1)
 {
 set_3x5();
 clear_errow(3);
 clear_errow(4);
 clear_errow(5);
 clear_errow(6);

 Glcd_Write_Text("=>", 3, 2, xColorSet);
 set_5x7();
 }
 if (position==2)
 {
 set_3x5();
 clear_errow(2);
 clear_errow(4);
 clear_errow(5);
 clear_errow(6);
 Glcd_Write_Text("=>", 3, 3, xColorSet);
 set_5x7();
 }
 if (position==3)
 {
 set_3x5();
 clear_errow(2);
 clear_errow(3);
 clear_errow(5);
 clear_errow(6);
 Glcd_Write_Text("=>", 3, 4, xColorSet);
 set_5x7();
 }
 if (position==4)
 {
 set_3x5();
 clear_errow(2);
 clear_errow(3);
 clear_errow(4);
 clear_errow(6);
 Glcd_Write_Text("=>", 3, 5, xColorSet);
 set_5x7();
 }
 if (position==5)
 {
 set_3x5();
 clear_errow(2);
 clear_errow(3);
 clear_errow(4);
 clear_errow(5);
 Glcd_Write_Text("=>", 3, 6, xColorSet);
 set_5x7();
 }



 if (set_but(0)==255)
 {

 if (position==1)
 {
 while(set_but(0)==255);
 range_set();
 }
 }
 if (set_but(0)==255)
 {
 if (position==2)
 {
 while(set_but(0)==255);
 unit_set();
 }
 }
 if (set_but(0)==255)
 {
 if (position==3)
 {
 while(set_but(0)==255)
 {
 while(set_but(0)==255);
 sqrt_set();
 }
 }
 }
 if (set_but(0)==255)
 {
 if (position==4)
 {
 while(set_but(0)==255)
 {
 while(set_but(0)==255);
 K_settong();
 }
 }
 }
 if (set_but(0)==255)
 {
 if (position==5)
 {
 while(set_but(0)==255)
 {
 while(set_but(0)==255);
 Reset();
 }
 }
 }
 }
 OPEN=1;
 cls();
}
#line 1 "e:/software and electronic wilcom/programs/air flow meter/flow main/flow_meter_i2c.c"
unsigned short read_ds1307(unsigned short address)
{
 char dataa;
 I2C1_Start();
 I2C1_Wr(0xd0);
 I2C1_Wr(address);
 I2C1_Repeated_Start();
 I2C1_Wr(0xd1);
 dataa=I2C1_Rd(0);
 I2C1_Stop();
 return(dataa);
}

void write_ds1307(unsigned short address,unsigned short w_data)
{
I2C1_Start();

I2C1_Wr(0xD0);
I2C1_Wr(address);
I2C1_Wr(w_data);
I2C1_Stop();
}


void dafualt_timer()
{

 Glcd_write_text("Dafult time",28,6,xColorSet);
 write_ds1307(0,0x80);
 write_ds1307(1,0x25);
 write_ds1307(2,0x69);
 write_ds1307(3,0x07);
 write_ds1307(4,0x22);
 write_ds1307(5,0x05);
 write_ds1307(6,0x10);
 write_ds1307(7,0x10);
 write_ds1307(0,0x00);
 write_ds1307(0x2F,0xAA);
 delay_ms(500);
 Glcd_write_text("Dafult time set",0,0,xColorSet);

}
#line 161 "E:/Software and Electronic wilcom/PROGRAMS/AIR FLOW METER/flow main/FLOW METER.c"
void totalizer_save()
{
 double TOTALLIZER_saved;
 TOTALLIZER_saved=TOTALLIZER*10000.0;


 write_ds1307(50, ((char *)&TOTALLIZER_saved)[0] );

 write_ds1307(51, ((char *)&TOTALLIZER_saved)[1] );

 write_ds1307(52, ((char *)&TOTALLIZER_saved)[2] );

 write_ds1307(53, ((char *)&TOTALLIZER_saved)[3] );
#line 187 "E:/Software and Electronic wilcom/PROGRAMS/AIR FLOW METER/flow main/FLOW METER.c"
}

void totalizer_read()
{

  ((char *)&TOTALLIZER)[0]  = read_ds1307(50);

  ((char *)&TOTALLIZER)[1]  = read_ds1307(51);

  ((char *)&TOTALLIZER)[2]  = read_ds1307(52);

  ((char *)&TOTALLIZER)[3]  = read_ds1307(53);
#line 211 "E:/Software and Electronic wilcom/PROGRAMS/AIR FLOW METER/flow main/FLOW METER.c"
 TOTALLIZER/=10000.0;
}


void total_rizer_cal()
{
 if (Total_flag==1)
 {
 Total_flag=0;

 TOTALLIZER+=actual_flow/3600.0;
 totalizer_save();
 set_8x7();
 if (NUMBER_UNIT==3 || NUMBER_UNIT==2)
 {

 sprintf(total_txt, "%.3f", TOTALLIZER/1000.0);
 }
 else
 {
 sprintf(total_txt, "%.0f", TOTALLIZER);
 }

 Glcd_write_text(total_txt,28,6,xColorSet);
 }
}


void main()
{
 OSCCON.IRCF0=1;
 OSCCON.IRCF1=1;
 OSCCON.IRCF2=1;
 OSCCON.SCS1=1;
 OSCCON.SCS1=0;
 OSCTUNE.PLLEN=1;
 OSCTUNE.TUN0=0;
 OSCTUNE.TUN1=0;
 OSCTUNE.TUN2=0;
 OSCTUNE.TUN3=0;
 OSCTUNE.TUN4=0;

 trise=0;
 trise.b0=1;
 trise.b1=1;
 trise.b2=1;
 ADC_Init();
 Init_mcu();
 Glcd_Init();
 CLS();
 xGlcd_Set_Font(Tahoma14x15 , 14,15,46);
 set_8x7();






 fill();
 someText = "Omni_Telemetry";
 ii = (128-xGlcd_Text_Width(someText)) / 2;
 xGlcd_Write_Text(someText,ii,16,xColorINVERT);

 someText = "www.Omnitm.ca";
 ii = (128-xGlcd_Text_Width(someText)) / 2;
 xGlcd_Write_Text(someText,ii,32,xColorINVERT);
 delay_ms(5000);
 CLS();
 fill();
 someText = "Flow_Computer";
 ii = (128-xGlcd_Text_Width(someText)) / 2;
 xGlcd_Write_Text(someText,ii,5,xColorinvert);


 someText = "FCU_5400";
 ii = (128-xGlcd_Text_Width(someText)) / 2;
 xGlcd_Write_Text(someText,ii,21,xColorinvert);




 someText = "Intellengent";
 Glcd_Write_Text(someText, 4, 5, xColorinvert);




 someText = "Flow_Metering";
 Glcd_Write_Text(someText, 4, 6, xColorinvert);


 delay_ms(5000);

 CLS();
 if (set_but(0)==255)
 {
 set_5x7();
 someText = "ADC SETTING MODE";
 Glcd_Write_Text(someText, 4, 4, xColorinvert);
 Setting_Mode_Enter=1;
 delay_ms(3000);
 }


 CLS();
 volts=00000000;
 xGlcd_Set_Font(Tahoma15x24, 15,24,45);
 set_5x7();
 set_3x5();
 sqrt_UNIT = EEPROM_Read(14);
 delay_ms(10);
 NUMBER_UNIT = EEPROM_Read(15);
 delay_ms(10);
 KVALUE=EEPROM_Read(16);
 KVALUE_k=KVALUE/100.0;
 delay_ms(10);
  ((char *)&lo_RAGE)[0] =EEPROM_Read(10);
 delay_ms(10);
  ((char *)&lo_RAGE)[1] =EEPROM_Read(11);
 delay_ms(10);
  ((char *)&hi_RAGE)[0] =EEPROM_Read(12);
 delay_ms(10);
  ((char *)&hi_RAGE)[1] =EEPROM_Read(13);
 delay_ms(10);
 set_5x7();


 if (NUMBER_UNIT==1)
 {
 someText = "kg/h";
 }
 else if (NUMBER_UNIT==2)
 {
 someText = "m3/h";
 }
 else if (NUMBER_UNIT==3)
 {
 someText = "TPH";
 }
 Glcd_Write_Text(someText, 100, 4, xColorSet);
 Glcd_H_Line(0, 127, 40 , 1);
 set_3x5();
 someText = "TOTAL";
 Glcd_Write_Text(someText, 4, 5, xColorSet);
 set_5x7();
 volts=0.0;
 sprintf(txt, "%.3f", volts);
 xGlcd_write_text(txt,5,8,xColorSet);
 xGlcd_write_text(txt,5,8,xColorClear);



 totalizer_read();
 if (NUMBER_UNIT==3)
 {
 sprintf(total_txt, "%.3f", TOTALLIZER/1000.0);
 }
 else
 {
 sprintf(total_txt, "%.0f", TOTALLIZER);
 }
 set_8x7();
 Glcd_write_text(total_txt,28,6,xColorSet);



 init_timer0();
 TIMER0_ON();
 INTCON.GIE=1;
 INTCON.GIEL=1;



 for(;;)
 {
 digital_value=0;
 for (psx=0;psx<50;psx++)
 {
 digital_value+=ADC_Read(0);
 delay_ms(10);
 total_rizer_cal();
 }

 digital_value=digital_value/50;

 if (Setting_Mode_Enter==1)
 {
 inttostr(digital_value,txt);
 set_5x7();
 Glcd_Write_Text(txt, 90, 6, xColorSet);
 }

 volts=digital_value;
 ACTUAL_FLOW=volts;





 volts-=204;
 volts/=820;
 volts*=(hi_rage-lo_rage)+lo_rage;

 if (ACTUAL_FLOW==1023)
 {
 volts=hi_rage;

 }

 else if (ACTUAL_FLOW<=204)
 {
 volts=Lo_rage;
 }

 if ( sqrt_UNIT==2)
 {
 volts=hi_rage* (sqrt(volts/hi_rage));
 }
 else
 {

 }
 actual_flow=volts;





 volts=actual_flow*KVALUE_k;
 actual_flow=volts;
 if (NUMBER_UNIT==3 || NUMBER_UNIT==2)
 {
 volts/=1000.0;
 }
 set_5x7();
 if (volts!=old_volts || OPEN==1)
 {
 if (NUMBER_UNIT==1)
 {
 someText = "kg/h";
 }
 else if (NUMBER_UNIT==2)
 {
 someText = "m3/h";
 }
 else if (NUMBER_UNIT==3)
 {
 someText = "TPH";

 }
 Glcd_Write_Text(someText, 100, 4, xColorSet);
 Glcd_H_Line(0, 127, 40 , 1);
 OPEN=0;
 xGlcd_write_text(txt,5,8,xColorClear);
 if (NUMBER_UNIT==3 || NUMBER_UNIT==2)
 {
 sprintf(txt, "%.3f", volts);
 }
 else
 {
 sprintf(txt, "%.0f", volts);
 }
 xGlcd_write_text(txt,5,8,xColorSet);
 old_volts=volts;
 }
#line 498 "E:/Software and Electronic wilcom/PROGRAMS/AIR FLOW METER/flow main/FLOW METER.c"
 if (set_but(0)==255)
 {
 if (scrl_but(0)==255)
 {
 if (one_sec>5)
 {

 if(Pass_word()==255)
 {
 set_5x7();
 slide_1 ();
 set_3x5();
 someText = "TOTAL";
 Glcd_Write_Text(someText, 4, 5, xColorSet);
 set_5x7();
 floattostr(volts,txt);
 INTCON.TMR0IF=0;
 TMR0H = 0xB;
 TMR0L = 0xDC;
 Total_flag=0;
 totalizer_save();
 if (NUMBER_UNIT==3 ||NUMBER_UNIT==2)
 {
 sprintf(total_txt, "%.3f", TOTALLIZER/1000.0);
 }
 else
 {
 sprintf(total_txt, "%.0f", TOTALLIZER);
 }
 set_8x7();
 Glcd_write_text(total_txt,28,6,xColorSet);
 one_sec=0;
 }
 else
 {
 OPEN=1;
 cls();
 set_3x5();
 someText = "TOTAL";
 Glcd_Write_Text(someText, 4, 5, xColorSet);
 set_5x7();
 floattostr(volts,txt);
 INTCON.TMR0IF=0;
 TMR0H = 0xB;
 TMR0L = 0xDC;
 Total_flag=0;
 totalizer_save();
 if (NUMBER_UNIT==3 || NUMBER_UNIT==2)
 {
 sprintf(total_txt, "%.3f", TOTALLIZER/1000.0);
 }
 else
 {
 sprintf(total_txt, "%.0f", TOTALLIZER);
 }
 set_8x7();
 Glcd_write_text(total_txt,28,6,xColorSet);
 one_sec=0;
 }
 }
 }
 else
 {
 one_sec=0;
 }
 }
#line 580 "E:/Software and Electronic wilcom/PROGRAMS/AIR FLOW METER/flow main/FLOW METER.c"
 }
}

void interrupt()
{
 if (INTCON.TMR0IF)
 {
 INTCON.TMR0IF=0;
 TMR0H = 0xB;
 TMR0L = 0xDC;
 Total_flag=1;
 timer_back_light++;
 if (timer_back_light>=60)
 {
 timer_back_light=0;
 BACK_LIGHT=0;
 }
 if (PORTE.b0==0 && PORTE.b1==0)
 {
 one_sec++;
 }
 else
 {
 one_sec=0;
 }
#line 609 "E:/Software and Electronic wilcom/PROGRAMS/AIR FLOW METER/flow main/FLOW METER.c"
 }
}
